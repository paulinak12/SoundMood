import streamlit as st
import pandas as pd
from PIL import Image
import requests
from io import BytesIO

# Cargar el archivo Excel
df = pd.read_excel('base2.xlsx')

# Crear el men√∫ de p√°ginas en la barra lateral
paginas = ['Presentaci√≥n', 'Encuesta']
pagina_seleccionada = st.sidebar.selectbox('Selecciona una p√°gina', paginas)

# P√°gina de Presentaci√≥n
if pagina_seleccionada == 'Presentaci√≥n':
    st.markdown("<h1 style='text-align: center;'>SOUNDMOOD</h1>", unsafe_allow_html=True)
    
    texto = """
    ¬°Hola! Somos Paulina Kosaka, Marcela Ismodes y Malena Aldazabal. Queremos darte la bienvenida a nuestra p√°gina. A continuaci√≥n, te presentamos m√°s informaci√≥n sobre¬†el¬†proyecto.
    </p><p>üéß **SoundMood: Tu estado de √°nimo tiene sonido¬øQu√© es SoundMood?**

SoundMood es una p√°gina web interactiva que busca conectar la m√∫sica con las emociones de cada usuario. A trav√©s de una interfaz amigable y personalizada, ofrecemos recomendaciones de canciones basadas en el estado de √°nimo actual de la persona. 

Pero vamos m√°s all√° de una simple recomendaci√≥n musical: personalizamos la experiencia seg√∫n las preferencias del usuario en cuanto al idioma (espa√±ol o ingl√©s), la duraci√≥n de la canci√≥n y el a√±o de lanzamiento.
    Adem√°s, para enriquecer la experiencia musical, SoundMood tambi√©n ofrece informaci√≥n detallada sobre el artista y la canci√≥n, permitiendo as√≠ que el usuario no solo escuche m√∫sica, sino que tambi√©n descubra y aprenda sobre lo que est√°¬†escuchando.
    
    \n__¬øPor qu√© creamos SoundMood?__
    
La m√∫sica siempre ha sido una herramienta poderosa para conectar con las emociones humanas. Todos hemos buscado canciones cuando estamos tristes, queremos motivarnos o simplemente relajarnos. Sin embargo, no siempre sabemos qu√© escuchar o no encontramos algo que realmente encaje con c√≥mo nos sentimos.

__SoundMood nace para resolver ese problema, ofreciendo una plataforma sencilla pero efectiva que:__

\nComprende lo que sientes
\nTe recomienda m√∫sica acorde a ese sentimiento
\nTe da control total sobre el tipo de m√∫sica que quieres descubrir
\nEnriquece tu experiencia al darte contexto e informaci√≥n sobre lo que est√°s¬†escuchando
    """
    
    st.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto}</div>", unsafe_allow_html=True)

# P√°gina de Experiencia
else: 
    # Selecci√≥n de emociones con la opci√≥n "Selecciona una opci√≥n"
    emociones = ['Selecciona una opci√≥n', 'alegre', 'triste', 'relajado', 'rom√°ntico', 'divertido', 'motivado', 'estresado/ansioso', 'molesto']
    emocion = st.selectbox("Selecciona c√≥mo te sientes hoy (Emoci√≥n):", emociones)

    # Verifica si se ha seleccionado una emoci√≥n v√°lida
    if emocion == 'Selecciona una opci√≥n':
        emocion = None

    # Prop√≥sito de la canci√≥n solo para emociones espec√≠ficas (triste, estresado/ansioso, molesto)
    proposito = ''
    if emocion in ['triste', 'estresado/ansioso', 'molesto']:
        proposito = st.radio("¬øQu√© buscas en la canci√≥n?", ['Que acompa√±e lo que siento', 'Que mejore mi estado de √°nimo'])

    # Opciones de duraci√≥n de la canci√≥n
    opciones_duracion = df['duracion'].dropna().unique()
    duracion_elegida = st.selectbox("¬øPrefieres una canci√≥n corta o larga?", ['Selecciona una opci√≥n'] + list(opciones_duracion))
    
    if duracion_elegida == 'Selecciona una opci√≥n':
        duracion_elegida = None

    # Selecci√≥n de idioma sin t√≠tulo
    idioma = st.radio("", ['Selecciona una opci√≥n', 'Espa√±ol', 'Ingl√©s'])
    
    if idioma == 'Selecciona una opci√≥n':
        idioma = None

    # Selecci√≥n de √©poca sin t√≠tulo
    epoca = st.radio("", ['Selecciona una opci√≥n', 'Hasta 2010', 'Desde 2011'])
    
    if epoca == 'Selecciona una opci√≥n':
        epoca = None

    # Verificamos que se haya hecho una selecci√≥n v√°lida
    if emocion and duracion_elegida and idioma and epoca:
        if epoca.lower() == 'hasta 2010':
            condicion_epoca = df['a√±o_exacto'] <= 2010
        else:
            condicion_epoca = df['a√±o_exacto'] >= 2011
        # Filtrar el DataFrame con los criterios seleccionados
        resultado = df[
            (df['emocion'].str.lower() == emocion.lower()) &
            (df['duracion'].str.lower() == duracion_elegida.lower()) &
            (df['idioma'].str.lower() == idioma.lower()) &
             condicion_epoca
        #((df['a√±o_exacto'].int() <= 2010) if epoca == 'hasta 2010' else (df['a√±o_exacto'].int() >= 2011))
        ]

        # Mostrar la canci√≥n recomendada si existe
        if not resultado.empty:
            cancion = resultado.sample(1).iloc[0]
            
            # Mostrar la informaci√≥n de la canci√≥n
            st.subheader("üé∂ Informaci√≥n de la canci√≥n recomendada üé∂")
            st.write(f"üé∂ Nombre: {cancion['nombre_cancion']}")
            st.write(f"üë§ Artista: {cancion['nombre_artista']}")
            st.write(f"üé∏ G√©nero: {cancion['genero']}")

            # Mostrar imagen del artista si est√° disponible
            foto = cancion['foto_artista']
            if isinstance(foto, str) and (foto.lower().endswith('.jpg') or foto.lower().endswith('.png')):
                st.image(foto, caption=f"Imagen de {cancion['nombre_artista']}", use_container_width=True)

            # Mostrar m√°s detalles
            st.write(f"üì≤ Red Social: {cancion['red_social']} ({cancion['link_red_social']})")
            st.write(f"üìù Letra:\n{cancion['letra_cancion']}")
            st.write(f"‚Ñπ Info: {cancion['info_cancion']}")
            st.write(f"üåê [Spotify]({cancion['url_spotify']})  |  [Video]({cancion['url_video']})")
        else:
            st.write("No se encontraron canciones para tu selecci√≥n.")
    else:
        st.write("Por favor selecciona todas las opciones para obtener una recomendaci√≥n.")
