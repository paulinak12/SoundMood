import streamlit as st
import pandas as pd
from PIL import Image

# Cargar el archivo Excel
df = pd.read_excel('base2.xlsx')

# Asegurar que 'a√±o_exacto' sea num√©rico
df['a√±o_exacto'] = pd.to_numeric(df['a√±o_exacto'], errors='coerce')

# Inicializar estado de sesi√≥n para limpiar formulario
if 'reset' not in st.session_state:
    st.session_state.reset = False

# Crear el men√∫ de p√°ginas en la barra lateral
paginas = ['Presentaci√≥n', 'Encuesta']
pagina_seleccionada = st.sidebar.selectbox('Selecciona una p√°gina', paginas)

# ------------------ P√ÅGINA DE PRESENTACI√ìN ------------------
if pagina_seleccionada == 'Presentaci√≥n':
    st.markdown("<h1 style='text-align: center;'>SOUNDMOOD</h1>", unsafe_allow_html=True)

    texto = """
    ¬°Hola! Somos Paulina Kosaka, Marcela Ismodes y Malena Aldazabal. Queremos darte la bienvenida a nuestra p√°gina. A continuaci√≥n, te presentamos m√°s informaci√≥n sobre el proyecto.

üéß **SoundMood**: Tu estado de √°nimo tiene sonido.

SoundMood es una p√°gina web interactiva que busca conectar la m√∫sica con las emociones de cada usuario. A trav√©s de una interfaz amigable y personalizada, ofrecemos recomendaciones de canciones basadas en el estado de √°nimo actual de la persona.

Pero vamos m√°s all√° de una simple recomendaci√≥n musical: personalizamos la experiencia seg√∫n las preferencias del usuario en cuanto al idioma (espa√±ol o ingl√©s), la duraci√≥n de la canci√≥n y el a√±o de lanzamiento.

Adem√°s, para enriquecer la experiencia musical, SoundMood tambi√©n ofrece informaci√≥n detallada sobre el artista y la canci√≥n, permitiendo as√≠ que el usuario no solo escuche m√∫sica, sino que tambi√©n descubra y aprenda sobre lo que est√° escuchando.

__¬øPor qu√© creamos SoundMood?__

La m√∫sica siempre ha sido una herramienta poderosa para conectar con las emociones humanas. Todos hemos buscado canciones cuando estamos tristes, queremos motivarnos o simplemente relajarnos. Sin embargo, no siempre sabemos qu√© escuchar o no encontramos algo que realmente encaje con c√≥mo nos sentimos.

SoundMood nace para resolver ese problema, ofreciendo una plataforma sencilla pero efectiva que:

- Comprende lo que sientes  
- Te recomienda m√∫sica acorde a ese sentimiento  
- Te da control total sobre el tipo de m√∫sica que quieres descubrir  
- Enriquece tu experiencia al darte contexto e informaci√≥n sobre lo que est√°s escuchando
    """
    st.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto}</div>", unsafe_allow_html=True)

# ------------------ P√ÅGINA DE ENCUESTA ------------------
else:
    # Pregunta 1: Emoci√≥n
    emociones = ['Selecciona una opci√≥n', 'Alegre', 'Relajado', 'Rom√°ntico', 'Divertido', 'Motivado', 'Triste', 'Estresado/ansioso', 'Molesto']
    emocion = st.selectbox("Selecciona c√≥mo te sientes hoy (Emoci√≥n):", emociones, key="emocion")
    if emocion == 'Selecciona una opci√≥n':
        emocion = None

    # Pregunta 2: Prop√≥sito solo si la emoci√≥n es negativa
    proposito = ''
    if emocion in ['Triste', 'Estresado/ansioso', 'Molesto']:
        proposito = st.radio("¬øQu√© buscas en la canci√≥n?", 
                             ['Que acompa√±e lo que siento', 'Que mejore mi estado de √°nimo'],
                             index=0, key="proposito")

    # Pregunta 3: Duraci√≥n
    opciones_duracion = df['duracion'].dropna().unique()
    duracion_elegida = st.selectbox("¬øPrefieres una canci√≥n corta o larga?", ['Selecciona una opci√≥n'] + list(opciones_duracion), key="duracion")
    if duracion_elegida == 'Selecciona una opci√≥n':
        duracion_elegida = None

    # Pregunta 4: Idioma
    idioma = st.radio("", ['Selecciona una opci√≥n', 'Espa√±ol', 'Ingl√©s'], key="idioma")
    if idioma == 'Selecciona una opci√≥n':
        idioma = None

    # Pregunta 5: √âpoca
    epoca = st.radio("", ['Selecciona una opci√≥n', 'Hasta 2010', 'Desde 2011'], key="epoca")
    if epoca == 'Selecciona una opci√≥n':
        epoca = None

    # Verificar que se completaron todas las preguntas
    if emocion and duracion_elegida and idioma and epoca:
        # Filtrar por √©poca
        if epoca.lower() == 'hasta 2010':
            condicion_epoca = df['a√±o_exacto'] <= 2010
        else:
            condicion_epoca = df['a√±o_exacto'] >= 2011

        # Filtrar seg√∫n los criterios seleccionados
        resultado = df[
            (df['emocion'].str.lower() == emocion.lower()) &
            (df['duracion'].str.lower() == duracion_elegida.lower()) &
            (df['idioma'].str.lower() == idioma.lower()) &
            condicion_epoca
        ]

        # Filtrar tambi√©n por prop√≥sito si aplica
        if emocion.lower() in ['triste', 'estresado/ansioso', 'molesto']:
            resultado['proposito'] = resultado['proposito'].str.lower().str.strip()
            if proposito == 'Que acompa√±e lo que siento':
                resultado = resultado[resultado['proposito'] == 'acompa√±ar']
            elif proposito == 'Que mejore mi estado de √°nimo':
                resultado = resultado[resultado['proposito'] == 'mejorar']

        # Mostrar canci√≥n si hay resultado
        if not resultado.empty:
            cancion = resultado.sample(1).iloc[0]
            st.subheader("üé∂ Informaci√≥n de la canci√≥n recomendada üé∂")

            # Dividir contenido en columnas
            col1, col2 = st.columns([2, 3])

            with col1:
                st.write(f"üé∂ Nombre: {cancion['nombre_cancion']}")
                st.write(f"‚åö Duraci√≥n: {cancion['duracion_exacta']}")
                st.write(f"üé∏ G√©nero: {cancion['genero']}")
                st.write(f"üë§ Artista: {cancion['nombre_artista']}")
                st.write(f"üì≤ Red Social: {cancion['red_social']} ({cancion['link_red_social']})")
                foto = cancion['foto_artista']
                if isinstance(foto, str) and (foto.lower().endswith('.jpg') or foto.lower().endswith('.png')):
                    st.markdown(
                        f"""
                        <div style="text-align: center;">
                            <img src="{foto}" alt="Imagen de {cancion['nombre_artista']}" width="200" style="border-radius: 10px;">
                            <p style="font-size: 14px; color: #555;">Imagen de {cancion['nombre_artista']}</p>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                st.write(f"‚ÑπÔ∏è Info: {cancion['info_cancion']}")

            with col2:
                st.write("üåê Esc√∫chala o mira el video oficial:")
                st.markdown(f"[Spotify]({cancion['url_spotify']})  |  [Video]({cancion['url_video']})")

                st.markdown("üìù **Letra:**")
                st.markdown(
                    f"""
                    <div style="overflow-x: auto;">
                        <pre style="font-size: 14px; line-height: 1.5;">{cancion['letra_cancion']}</pre>
                    </div>
                    """,
                    unsafe_allow_html=True
                )

            # Bot√≥n para reiniciar todo
            if st.button("üîÅ Buscar otra canci√≥n / Limpiar selecci√≥n"):
                for key in ['emocion', 'proposito', 'duracion', 'idioma', 'epoca']:
                    if key in st.session_state:
                        del st.session_state[key]
                st.experimental_rerun()
        else:
            st.warning("No se encontraron canciones para tu selecci√≥n.")
    else:
        st.info("Por favor selecciona todas las opciones para obtener una recomendaci√≥n.")
